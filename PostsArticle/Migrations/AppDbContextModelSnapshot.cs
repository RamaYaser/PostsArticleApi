// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PostsArticle.Data;

#nullable disable

namespace PostsArticle.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PostsArticle.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreaterId")
                        .HasColumnType("int");

                    b.Property<int?>("CreaterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UbdaterUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreaterUserId");

                    b.HasIndex("PostId");

                    b.HasIndex("UbdaterUserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("PostsArticle.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreaterId")
                        .HasColumnType("int");

                    b.Property<int?>("CreaterUserId")
                        .HasColumnType("int");

                    b.Property<string>("PContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UbdaterUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreaterUserId");

                    b.HasIndex("UbdaterUserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("PostsArticle.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PostsArticle.Entities.Comment", b =>
                {
                    b.HasOne("PostsArticle.Entities.User", "CreaterUser")
                        .WithMany()
                        .HasForeignKey("CreaterUserId");

                    b.HasOne("PostsArticle.Entities.Post", "Post")
                        .WithMany("comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostsArticle.Entities.User", "UbdaterUser")
                        .WithMany()
                        .HasForeignKey("UbdaterUserId");

                    b.Navigation("CreaterUser");

                    b.Navigation("Post");

                    b.Navigation("UbdaterUser");
                });

            modelBuilder.Entity("PostsArticle.Entities.Post", b =>
                {
                    b.HasOne("PostsArticle.Entities.User", "CreaterUser")
                        .WithMany()
                        .HasForeignKey("CreaterUserId");

                    b.HasOne("PostsArticle.Entities.User", "UbdaterUser")
                        .WithMany()
                        .HasForeignKey("UbdaterUserId");

                    b.Navigation("CreaterUser");

                    b.Navigation("UbdaterUser");
                });

            modelBuilder.Entity("PostsArticle.Entities.Post", b =>
                {
                    b.Navigation("comments");
                });
#pragma warning restore 612, 618
        }
    }
}
